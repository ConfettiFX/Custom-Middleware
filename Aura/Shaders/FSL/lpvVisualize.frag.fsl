/*
 * Copyright (c) 2018-2021 Confetti Interactive Inc.
 *
 * This is a part of Aura.
 * 
 * This file(code) is licensed under a 
 * Creative Commons Attribution-NonCommercial 4.0 International License 
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode) 
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#include "lpvVisualizeCommon.h"
#include "lpvSHMaths.h"

STRUCT(PsIn)
{
	DATA(float4, position,            SV_Position);
    DATA(float2, texCoord,            TEXCOORD0);
    DATA(float3, cameraSpacePosition, TEXCOORD1);
	DATA(float3, gridPosition,        TEXCOORD2);
};

STRUCT(PsOut)
{
	DATA(float4, color, SV_Target0);
	DATA(float,  depth, SV_Depth);
};

PsOut PS_MAIN(PsIn In) 
{
	INIT_MAIN;

    float3 N;
    N.xy = In.texCoord;

    float r2 = dot(N.xy, N.xy);
    if (r2 > 1.0f) 
        discard;

    N.z = -sqrt(1.0f - r2);

    // Evaluate spherical harmonics in LPV grid
    float3 worldSpaceN = mul(Get(invView), float4(N, 0.0f)).xyz;    
	SHCoeffs shCosineLobe = SHProjectCone(-worldSpaceN);
    SHSpectralCoeffs spCoeffs0 = SHSampleGrid(Get(linearBorder), In.gridPosition, i3(0));
    float3 incidentLuminance = max(f3(0.0f), SHDot(spCoeffs0, shCosineLobe));

    // Compute depth of pixel
    f4x4 projection_ = Get(projection);
    float3 pixelPosition = In.cameraSpacePosition + N * Get(probeRadius);
    float clipZ = getElem(projection_, 2, 2) * pixelPosition.z + getElem(projection_, 3, 2);
    float clipW = getElem(projection_, 2, 3) * pixelPosition.z + getElem(projection_, 3, 3);

    float probeAlpha = any(incidentLuminance) ? 1.0f : 0.5f;

    PsOut Out;
    Out.depth = clipZ / clipW;
    Out.color = float4(incidentLuminance * Get(lightScale), probeAlpha);
    
    RETURN(Out);
}
