/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This is a part of Ephemeris.
* This file(code) is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License (https://creativecommons.org/licenses/by-nc/4.0/legalcode) Based on a work at https://github.com/ConfettiFX/The-Forge.
* You may not use the material for commercial purposes.
*
*/

#version 450 core
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_samplerless_texture_functions : enable

#include "volumetricCloud.h"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void HLSLmain(uvec3 GTid, uvec3 Gid, uvec3 DTid)
{
    if ( DTid.x >= uint(VolumetricCloudsCBuffer.g_VolumetricClouds.TimeAndScreenSize.z * 0.25) || DTid.y >= uint(VolumetricCloudsCBuffer.g_VolumetricClouds.TimeAndScreenSize.w * 0.25) )
        return;
  
    vec2 db_uvs = vec2((float ((float ((((DTid).x * uint (4)) + (VolumetricCloudsCBuffer.g_VolumetricClouds).m_JitterX)) + 0.5)) / ((VolumetricCloudsCBuffer.g_VolumetricClouds).TimeAndScreenSize).z), (float ((float ((((DTid).y * uint (4)) + (VolumetricCloudsCBuffer.g_VolumetricClouds).m_JitterY)) + 0.5)) / ((VolumetricCloudsCBuffer.g_VolumetricClouds).TimeAndScreenSize).w));
    vec2 ScreenUV = db_uvs;
    vec3 ScreenNDC;
    ((ScreenNDC).x = (((ScreenUV).x * float (2.0)) - float (1.0)));
    ((ScreenNDC).y = (((float (1.0) - (ScreenUV).y) * float (2.0)) - float (1.0)));
    vec3 projectedPosition = vec3((ScreenNDC).xy, 0.0);
    vec4 worldPos = (((VolumetricCloudsCBuffer.g_VolumetricClouds).m_DataPerEye[0].m_ProjToWorldMat)*(vec4(projectedPosition, 1.0)));
    vec4 CameraPosition = (VolumetricCloudsCBuffer.g_VolumetricClouds).m_DataPerEye[0].cameraPosition;
    (worldPos /= vec4 ((worldPos).w));
    vec3 viewDir = normalize(((worldPos).xyz - (CameraPosition).xyz));
    float intensity;
    float atmosphereBlendFactor;
    float depth;
    float randomSeed = mix(fract(randomFromScreenUV(db_uvs * VolumetricCloudsCBuffer.g_VolumetricClouds.TimeAndScreenSize.zw)), (VolumetricCloudsCBuffer.g_VolumetricClouds).Random00, (VolumetricCloudsCBuffer.g_VolumetricClouds).m_UseRandomSeed);

    float dentisy = GetDensity_Double_Layers(CameraPosition.xyz, worldPos.xyz, viewDir, randomSeed, intensity, atmosphereBlendFactor, depth, db_uvs);
    imageStore(volumetricCloudsDstTexture, ivec2(ivec2((DTid).xy)), vec4(intensity, atmosphereBlendFactor, depth, dentisy));
}
void main()
{
    uvec3 GTid;
    GTid = gl_LocalInvocationID;
    uvec3 Gid;
    Gid = gl_WorkGroupID;
    uvec3 DTid;
    DTid = gl_GlobalInvocationID;
    HLSLmain(GTid, Gid, DTid);
}