/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This is a part of Ephemeris.
* This file(code) is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License (https://creativecommons.org/licenses/by-nc/4.0/legalcode) Based on a work at https://github.com/ConfettiFX/The-Forge.
* You may not use the material for commercial purposes.
*
*/

#version 450 core

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_samplerless_texture_functions : enable

#include "volumetricCloud.h"


#define MAX_WIDTH 1024

shared vec2 SharedData[MAX_WIDTH];

layout(local_size_x = MAX_WIDTH, local_size_y = 1, local_size_z = 1) in;
void HLSLmain(uvec3 GroupId, uvec3 GroupThreadId, uint GroupIndex)
{
    int groupIndex = int ((GroupId).y);
    int localIndex = int ((GroupThreadId).x);
    float weight[3] = {0.68269, 0.157305, 0.00135};
    vec4 CurrentPixelValue = vec4 ((texelFetch(InputTex, ivec2((ivec3(localIndex, groupIndex, 0) * ivec3 (2))).xy, ((ivec3(localIndex, groupIndex, 0) * ivec3 (2))).z)).rgba);
    (SharedData[localIndex] = (CurrentPixelValue).ra);
    barrier(); groupMemoryBarrier();
    vec2 resultColor = vec2 ((vec2 (SharedData[localIndex]) * vec2 (weight[0])));
    for (int i = 1; (i < 3); (i++))
    {
        float weihtValue = weight[i];
        (resultColor += vec2 ((vec2 (SharedData[(localIndex + i)]) * vec2 (weihtValue))));
        (resultColor += vec2 ((vec2 (SharedData[(localIndex - i)]) * vec2 (weihtValue))));
    }
    imageStore(OutputTex, ivec2(uvec2(localIndex, groupIndex)), vec4((resultColor).r, (CurrentPixelValue).gb, (resultColor).g));
}
void main()
{
    uvec3 GroupId;
    GroupId = gl_WorkGroupID;
    uvec3 GroupThreadId;
    GroupThreadId = gl_LocalInvocationID;
    uint GroupIndex;
    GroupIndex = gl_LocalInvocationIndex;
    HLSLmain(GroupId, GroupThreadId, GroupIndex);
}
