/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This is a part of Ephemeris.
* This file(code) is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License (https://creativecommons.org/licenses/by-nc/4.0/legalcode) Based on a work at https://github.com/ConfettiFX/The-Forge.
* You may not use the material for commercial purposes.
*
*/

#version 450 core

#extension GL_EXT_samplerless_texture_functions : enable


layout(UPDATE_FREQ_NONE, binding = 25) uniform texture2D SrcTexture;
layout(UPDATE_FREQ_NONE, binding = 35, r32f) uniform image2D DstTexture;
float CombineGroup(in float a, in float b)
{
    return max(a, b);
}
#define NUM_THREADS_X 16
#define NUM_THREADS (NUM_THREADS_X * NUM_THREADS_X)
shared float GroupOutput[NUM_THREADS];

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_X, local_size_z = 1) in;
void HLSLmain(uvec3 GTid, uvec3 Gid, uvec3 DTid, uint GroupIndex)
{
    GroupOutput[(((GTid).y * uint (NUM_THREADS_X)) + (GTid).x)] = texelFetch(SrcTexture, ivec2(DTid.xy * 2), 0).r;
    barrier(); groupMemoryBarrier();
    for (int i = (NUM_THREADS >> 1); (i > 0); (i = (i >> 1)))
    {
        if((GroupIndex < uint (i)))
        {
            (GroupOutput[GroupIndex] = CombineGroup(GroupOutput[GroupIndex], GroupOutput[(GroupIndex + uint (i))]));
        }
        barrier(); groupMemoryBarrier();
    }
    if((GroupIndex == uint (0)))
    {
        imageStore(DstTexture, ivec2((Gid).xy), vec4(GroupOutput[0], 0.0, 0.0, 0.0));
    }
}
void main()
{
    uvec3 GTid;
    GTid = gl_LocalInvocationID;
    uvec3 Gid;
    Gid = gl_WorkGroupID;
    uvec3 DTid;
    DTid = gl_GlobalInvocationID;
    uint GroupIndex;
    GroupIndex = gl_LocalInvocationIndex;
    HLSLmain(GTid, Gid, DTid, GroupIndex);
}
