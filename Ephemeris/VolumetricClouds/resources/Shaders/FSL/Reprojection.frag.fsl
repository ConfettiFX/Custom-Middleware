/*
* Copyright (c) 2017-2022 The Forge Interactive Inc.
*
* This is a part of Ephemeris.
* This file(code) is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License (https://creativecommons.org/licenses/by-nc/4.0/legalcode) Based on a work at https://github.com/ConfettiFX/The-Forge.
* You can not use this code for commercial purposes.
*
*/

#include "VolumetricCloudsCommon.h"

STRUCT(PsIn)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, TexCoord, TEXCOORD0);
	DATA(float2, VSray,    TEXCOORD1);
};

float4 PS_MAIN(PsIn In)
{
	INIT_MAIN;

	float2 _Jitter = float2(float(Get(m_JitterX)), float(Get(m_JitterY)));	
	float2 onePixeloffset = 1.0f / Get(TimeAndScreenSize).zw;
	float2 uv = In.TexCoord - (_Jitter - 1.5f) * onePixeloffset;

	float4 currSample = SampleTex2D(Get(LowResCloudTexture), Get(g_PointClampSampler), uv);
	float  depth = UnPackFloat16(currSample.z);
	
	float2 NDC = float2(In.TexCoord.x * 2.0f - 1.0f, (1.0f - In.TexCoord.y) * 2.0f - 1.0f);
	float4 worldPos = mul(Get(m_DataPerEye)[0].m_ProjToWorldMat, float4(NDC, 0.0f, 1.0f));
	worldPos /= worldPos.w;

	float3 viewDir = normalize(worldPos.xyz - Get(m_DataPerEye)[0].cameraPosition.xyz);

	float3 firstHitRayPos = (viewDir * depth) + Get(m_DataPerEye)[0].cameraPosition.xyz;
	float4 prevUV = mul(Get(m_DataPerEye)[0].m_PrevWorldToProjMat, float4(firstHitRayPos, 1.0f));
	
	prevUV /= prevUV.w;
	prevUV.xy = float2((prevUV.x + 1.0f) * 0.5f, (1.0f - prevUV.y) * 0.5f);

	//Check that projected texture coordinates are out bounded or not
	float outOfBound = step(0.0f, max(max(-prevUV.x, -prevUV.y), max(prevUV.x, prevUV.y) - 1.0f));	

	float4 prevSample = SampleTex2D(Get(g_PrevFrameTexture), Get(g_LinearClampSampler), prevUV.xy);

	float blend = max(ShouldbeUpdated(In.TexCoord, _Jitter), outOfBound);

	float4 result = lerp(prevSample, currSample, blend);

	if(any(isnan(result)))
	{
		result = f4(0.0f);
	}

	RETURN(result);
}