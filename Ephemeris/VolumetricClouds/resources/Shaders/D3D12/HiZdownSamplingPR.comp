/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This is a part of Ephemeris.
* This file(code) is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License (https://creativecommons.org/licenses/by-nc/4.0/legalcode) Based on a work at https://github.com/ConfettiFX/The-Forge.
* You may not use the material for commercial purposes.
*
*/

Texture2D<float> SrcTexture : register(t28);
RWTexture2D<float> DstTexture : register(u30);

float CombineGroup(in float a, in float b)
{ 
	return max(a, b);
}

#define NUM_THREADS_X	16
#define NUM_THREADS (NUM_THREADS_X * NUM_THREADS_X)

groupshared float GroupOutput[NUM_THREADS];

[numthreads(NUM_THREADS_X, NUM_THREADS_X, 1)]
void main(uint3 GTid : SV_GroupThreadID, uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint GroupIndex: SV_GroupIndex)
{
	GroupOutput[GTid.y * NUM_THREADS_X + GTid.x] = SrcTexture.Load(int3(DTid.xy * 2, 0), int2(0, 0));

	GroupMemoryBarrierWithGroupSync();

	// parallel reduction
	// using Chan's method of calculating mean and variance in parallel
	// https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
	[unroll]
	for(int i = NUM_THREADS >> 1; i > 0; i = i >> 1)
	{
		if(GroupIndex < i)
		{
			GroupOutput[GroupIndex] = CombineGroup(GroupOutput[GroupIndex], GroupOutput[GroupIndex + i]);
		}
		GroupMemoryBarrierWithGroupSync();
	}

	if(GroupIndex == 0)
	{		
		DstTexture[Gid.xy] = GroupOutput[0];
	}	
}