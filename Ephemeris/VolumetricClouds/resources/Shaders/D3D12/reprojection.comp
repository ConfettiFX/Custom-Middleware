/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This is a part of Ephemeris.
* This file(code) is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License (https://creativecommons.org/licenses/by-nc/4.0/legalcode) Based on a work at https://github.com/ConfettiFX/The-Forge.
* You may not use the material for commercial purposes.
*
*/

Texture2D LowResCloudTexture : register(t0);
Texture2D PrevFrameTexture : register(t1);

SamplerState BilinearClampSampler : register(s0);
SamplerState PointClampSampler : register(s1);

RWTexture2D<float4> DstTexture : register(u0);

cbuffer uniformGlobalInfoRootConstant : register(b0)
{
	float2 _Time;
	float2 screenSize;
	float4 lightDirection;
	float4 lightColorAndIntensity;
	float4 cameraPosition;

	float4x4 VP;
	float4x4 InvVP;
	float4x4 InvWorldToCamera;
	float4x4 prevVP;
	float4x4 LP;

	float near;
	float far;

	float correctU;
	float correctV;

	float4 ProjectionExtents;
	uint lowResFrameIndex;

	uint JitterX;
	uint JitterY;

	float exposure;
	float decay;
	float density;
	float weight;

	uint NUM_SAMPLES;

	float4 skyBetaR;
	float4 skyBetaV;

	float turbidity;
	float rayleigh;
	float mieCoefficient;
	float mieDirectionalG;
}

float4 SamplePrev(float4 worldPos, out float outOfBound)
{
	float4 prevUV = mul(prevVP, worldPos);
	prevUV /= prevUV.w;
	
	prevUV.xy = float2((prevUV.x + 1.0) * 0.5, (1.0 - prevUV.y) * 0.5);

	float oobmax = max(-prevUV.x,-prevUV.y);
	float oobmin = max(prevUV.x, prevUV.y) - 1.0;//  max(prevUV.x - 1.0, prevUV.y - 1.0);
	outOfBound = step(0.0, max(oobmin, oobmax));

	return PrevFrameTexture.SampleLevel(BilinearClampSampler, prevUV.xy, 0);
}

float4 SampleCurrent(float2 uv, float2 _Jitter)
{
	uv = uv - (_Jitter - 1.5) * (1.0 / screenSize.xy);	
	return LowResCloudTexture.SampleLevel(PointClampSampler, uv, 0);	
}


float CurrentCorrect(float2 uv, float2 jitter)
{
	float2 texelRelativePos = fmod(uv * screenSize.xy, 4.0);//between (0, 4.0)
	texelRelativePos -= jitter;
	float2 valid = saturate(2.0 * (float2(0.5, 0.5) - abs(texelRelativePos - float2(0.5, 0.5))));
	return valid.x * valid.y;
}


#define THREAD_SIZE 16

[numthreads(THREAD_SIZE, THREAD_SIZE, 1)]
void main(uint3 GTid : SV_GroupThreadID, uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID)
{
	float2 ScreenUV;

	ScreenUV.x = ((float)DTid.x + 0.5) / screenSize.x;
	ScreenUV.y = ((float)DTid.y + 0.5) / screenSize.y;

	float outOfBound;
	
	float2 _Jitter = float2(float(JitterX), float(JitterY));

	float4 currSample = SampleCurrent(ScreenUV, _Jitter);
	
	float depth = currSample.b;
	
	float4 result = currSample;

	float3 ScreenNDC;
	ScreenNDC.x = ScreenUV.x * 2.0 - 1.0;
	ScreenNDC.y = (1.0 - ScreenUV.y) * 2.0 - 1.0;	
	
	float3 vspos = float3(ScreenNDC.xy * ProjectionExtents.xy + ProjectionExtents.zw, 1.0) * depth;

	float4 worldPos = mul(InvWorldToCamera, float4(vspos, 1.0));
	

	float4 prevSample = SamplePrev(worldPos, outOfBound);

	float correct = max(CurrentCorrect(ScreenUV, _Jitter) * 0.5f, outOfBound);

	DstTexture[int2(DTid.xy)] = lerp(prevSample, result, correct);
	
}


