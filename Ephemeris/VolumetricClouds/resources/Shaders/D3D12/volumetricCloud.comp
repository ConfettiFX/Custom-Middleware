/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This is a part of Ephemeris.
* This file(code) is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License (https://creativecommons.org/licenses/by-nc/4.0/legalcode) Based on a work at https://github.com/ConfettiFX/The-Forge.
* You may not use the material for commercial purposes.
*
*/

#include "volumetricCloud.h"

RWTexture2D<float4> volumetricCloudsDstTexture : register(u0);

[numthreads(8, 8, 1)]
void main(uint3 GTid : SV_GroupThreadID, uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID)
{
	if (DTid.x >= (uint)(g_VolumetricClouds.TimeAndScreenSize.z * 0.25) || DTid.y >= (uint)(g_VolumetricClouds.TimeAndScreenSize.w * 0.25))
    return;

	float2 db_uvs = float2(((float)DTid.x * 4 + g_VolumetricClouds.m_JitterX + 0.5) / (g_VolumetricClouds.TimeAndScreenSize.z), ((float)DTid.y * 4 + g_VolumetricClouds.m_JitterY + 0.5) / (g_VolumetricClouds.TimeAndScreenSize.w));
	float2 ScreenUV = db_uvs;

	float3 ScreenNDC;
	ScreenNDC.x = ScreenUV.x * 2.0 - 1.0;
	ScreenNDC.y = (1.0 - ScreenUV.y) * 2.0 - 1.0; 

	float3 projectedPosition = float3(ScreenNDC.xy, 0.0);

	float4 worldPos = mul(g_VolumetricClouds.m_DataPerEye[0].m_ProjToWorldMat, float4(projectedPosition, 1.0));
	float4 CameraPosition = g_VolumetricClouds.m_DataPerEye[0].cameraPosition;

	worldPos /= worldPos.w;

	float3 viewDir = normalize(worldPos.xyz - CameraPosition.xyz);
 
	float intensity;
	float atmosphereBlendFactor;
	float depth;

	//_RaymarchOffset
	float randomSeed = lerp(frac(randomFromScreenUV(db_uvs * g_VolumetricClouds.TimeAndScreenSize.zw)), g_VolumetricClouds.Random00, g_VolumetricClouds.m_UseRandomSeed);
	float density = GetDensity(CameraPosition.xyz, worldPos.xyz, viewDir, randomSeed, intensity, atmosphereBlendFactor, depth, db_uvs);
			
	volumetricCloudsDstTexture[int2(DTid.xy)] = float4(intensity, atmosphereBlendFactor, depth, density);
}