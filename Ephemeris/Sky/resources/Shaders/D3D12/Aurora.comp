/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This is a part of Ephemeris.
* This file(code) is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License (https://creativecommons.org/licenses/by-nc/4.0/legalcode) Based on a work at https://github.com/ConfettiFX/The-Forge.
* You may not use the material for commercial purposes.
*
*/

struct PsIn {
	float4 position     : SV_Position;
	float2 texCoord	    : TexCoord0;
	float3 color        : TexCoord1;
};

struct AuroraParticle
{
	float4 PrevPosition;			// PrePosition and movable flag
	float4 Position;				// Position and mass
	float4 Acceleration;
};

struct AuroraConstraint
{
	uint IndexP0;
	uint IndexP1;
	float RestDistance;
	float Padding00;
	float Padding01;
	float Padding02;
	float Padding03;
	float Padding04;
};

RWStructuredBuffer<AuroraParticle> AuroraParticleBuffer		: register(u1);
RWStructuredBuffer<AuroraConstraint> AuroraConstraintBuffer	: register(u0, space1);

cbuffer AuroraUniformBuffer	: register(b4)
{	
	uint        maxVertex;
	float       heightOffset;
	float       height;
	float       deltaTime;

	float4x4    ViewProjMat;
}

void satisfyConstraint(uint threadID)
{
	AuroraConstraint constraint = AuroraConstraintBuffer[threadID];

	AuroraParticle p0 = AuroraParticleBuffer[constraint.IndexP0];
	AuroraParticle p1 = AuroraParticleBuffer[constraint.IndexP1];
	
	float3 gap = normalize(p0.Position.xyz - p1.Position.xyz);

	float current_distance = distance(p0.Position.xyz, p1.Position.xyz);

	float3 correctionVector = gap * (abs(current_distance - constraint.RestDistance) / constraint.RestDistance) * 0.0001f; // The offset vector that could moves p1 into a distance of rest_distance to p2
    
	p0.Position.xyz += correctionVector;
	p1.Position.xyz -= correctionVector;

	AuroraParticleBuffer[constraint.IndexP0] = p0;
	AuroraParticleBuffer[constraint.IndexP1] = p1;
}

void update(uint threadID)
{
	const float DAMPING = 0.01f;

	AuroraParticle p0 = AuroraParticleBuffer[threadID];
	
	float3 temporaryPosition = p0.Position.xyz;
    p0.Position.xyz += ((p0.Position.xyz - p0.PrevPosition.xyz) * (1.0f - DAMPING)) + p0.Acceleration.xyz * deltaTime;
    p0.PrevPosition.xyz = temporaryPosition;

	p0.Acceleration.xyz = float3(0.0f, 0.0f, 0.0f);
	AuroraParticleBuffer[threadID] = p0;
}


void addForce(uint threadID, float3 force)
{
	AuroraParticle p0 = AuroraParticleBuffer[threadID];

    p0.Acceleration.xyz += force / p0.Position.a;

	AuroraParticleBuffer[threadID] = p0;
}

[numthreads(64, 1, 1)]
void main(uint3 GTid : SV_GroupThreadID, uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID)
{		
	const uint  CONSTRAINT_ITERATIONS = 15;

	uint ThreadID = DTid.x;
	uint even = ThreadID % 2;

	// Caluate Constraint first
	
	if(ThreadID < (maxVertex - 1))
	{
		[unroll(CONSTRAINT_ITERATIONS)]
		for(uint iteration = 0; iteration < CONSTRAINT_ITERATIONS; iteration++)
		{		
			if(even == 0)
				satisfyConstraint(ThreadID);

			GroupMemoryBarrierWithGroupSync();

			// To avoid race condition
		
			if(even == 1)
				satisfyConstraint(ThreadID);

			GroupMemoryBarrierWithGroupSync();		
		}
		
		/*
		[unroll(CONSTRAINT_ITERATIONS)]
		for(uint iteration = 0; iteration < CONSTRAINT_ITERATIONS; iteration++)
		{		
			if(even == 0)
				satisfyConstraint(ThreadID);
		}

		GroupMemoryBarrierWithGroupSync();

		
		[unroll(CONSTRAINT_ITERATIONS)]
		for(uint iteration = 0; iteration < CONSTRAINT_ITERATIONS; iteration++)
		{		
			if(even == 1)
				satisfyConstraint(ThreadID);				
		}

		GroupMemoryBarrierWithGroupSync();
		*/ 
	}


	GroupMemoryBarrierWithGroupSync();

	// Update Particle Position
	update(ThreadID);


	GroupMemoryBarrierWithGroupSync();

	// Apply Force
	addForce(ThreadID, normalize(float3(1.0, 0.0, 0.0)));
}